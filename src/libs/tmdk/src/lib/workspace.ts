// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import {
  GetWorkspaceCommandOutput,
  ResourceNotFoundException,
  ValidationException,
} from "@aws-sdk/client-iottwinmaker";

import * as utils from "./utils";
import { getDefaultAwsClients as aws } from "./aws-clients";

import WORKSPACE_ROLE_ASSUME_POLICY from "./policy/workspace-role-assume-policy.json";
import WORKSPACE_DASHBOARD_ROLE_ASSUME_POLICY from "./policy/workspace-dashboard-role-assume-policy.json";

// Heuristically get dashboard role from workspace's role.
// We don't yet store dashboard role in workspace, but if the role is created
// by the getting started guide, it has a fixed pattern.
async function getDashboardRole(workspaceId: string) {
  const workspace = await aws().tm.getWorkspace({ workspaceId: workspaceId });

  const workspaceDashboardRole = workspace.role?.replace(
    "WorkspaceRole",
    "WorkspaceDashboardRole"
  );

  return workspaceDashboardRole;
}

async function createRoleAndPolicy(
  uniqueId: string,
  roleType: "WorkspaceRole" | "WorkspaceDashboardRole",
  roleAssumePolicy: string,
  rolePolicy: string
) {
  const roleName = `IoTTwinMaker${roleType}-${uniqueId}`;
  console.log(`Creating Role ${roleName}...`);

  const createRoleResponse = await aws().iam.createRole({
    RoleName: roleName,
    Path: "/",
    AssumeRolePolicyDocument: roleAssumePolicy,
    Description: `${roleType} generated by AWS IoT TwinMaker Getting Started Script`,
  });

  if (!createRoleResponse.Role || !createRoleResponse.Role.Arn) {
    throw new Error(`Failed to create role ${roleName}.`);
  }

  const roleArn = createRoleResponse.Role.Arn;

  console.log(`Created Role: ${roleArn}.`);

  const createPolicyResponse = await aws().iam.createPolicy({
    PolicyName: `IoTTwinMaker${roleType}Policy-${uniqueId}`,
    PolicyDocument: rolePolicy,
    Description: `${roleType} Policy generated by AWS IoT TwinMaker Getting Started Script`,
  });

  const policyArn = createPolicyResponse.Policy?.Arn;

  console.log(`Created Policy: ${policyArn}`);

  await aws().iam.attachRolePolicy({
    RoleName: roleName,
    PolicyArn: policyArn,
  });

  console.log(`Attached Policy: ${policyArn} to Role: ${roleArn}.`);

  return roleArn;
}

async function createWorkspaceS3Bucket(uniqueId: string) {
  const s3BucketName = `iot-twinmaker-workspace-bucket-${uniqueId}`;

  console.log("Creating S3 Bucket for the IoT TwinMaker Workspace...");

  const response = await aws().s3.createBucket({ Bucket: s3BucketName });

  console.log(`Workspace S3 Bucket created: ${response.Location}`);

  console.log("Configuring CORS policy...");

  aws().s3.putBucketCors({
    Bucket: s3BucketName,
    CORSConfiguration: {
      CORSRules: [
        {
          AllowedHeaders: ["*"],
          AllowedMethods: ["GET", "PUT", "POST", "DELETE", "HEAD"],
          AllowedOrigins: ["*"],
          ExposeHeaders: ["ETag", "Access-Control-Allow-Origin"],
        },
      ],
    },
  });

  return { s3BucketName, s3BucketArn: `arn:aws:s3:::${s3BucketName}` };
}

async function prepareWorkspace(
  workspaceId: string,
  workspaceRolePolicyTemplate: string,
  workspaceDashboardRolePolicyTemplate: string,
  amgIamRole?: string
) {
  const uniqueId = utils.createUniqueId();

  const region = aws().region;
  const { accountId, accountArn } = await aws().getCurrentIdentity();

  const { s3BucketArn } = await createWorkspaceS3Bucket(uniqueId);

  const policyParams: Record<string, string> = {
    accountId,
    accountArn,
    region,
    workspaceS3BucketArn: s3BucketArn,
  };

  const workspaceRolePolicy = utils.replaceTemplateVars(
    workspaceRolePolicyTemplate,
    policyParams
  );

  const workspaceRoleArn = await createRoleAndPolicy(
    uniqueId,
    "WorkspaceRole",
    JSON.stringify(WORKSPACE_ROLE_ASSUME_POLICY),
    workspaceRolePolicy
  );

  const workspaceArn = await utils.retryAsync(
    async () => {
      const response = await aws().tm.createWorkspace({
        workspaceId,
        role: workspaceRoleArn,
        s3Location: s3BucketArn,
      });

      const workspaceArn = response.arn;

      if (!workspaceArn) {
        throw new Error("Failed to create Workspace");
      }

      console.log(`Created Workspace: ${workspaceArn}`);

      return workspaceArn;
    },
    {
      attempts: 10,
      shouldRetry: (err) => {
        return (
          err instanceof ValidationException &&
          err.message.includes("Could not assume the role provided")
        );
      },
      beforeRetry: () => {
        console.log("Waiting for the newly created role to be propagated...");
        return utils.delay(2000);
      },
    }
  );

  policyParams.workspaceArn = workspaceArn;
  policyParams.dashboardRoleAssumedByArn = amgIamRole ?? accountArn;

  const workspaceDashboardRoleAssumePolicy = utils.replaceTemplateVars(
    JSON.stringify(WORKSPACE_DASHBOARD_ROLE_ASSUME_POLICY),
    policyParams
  );
  const workspaceDashboardRolePolicy = utils.replaceTemplateVars(
    workspaceDashboardRolePolicyTemplate,
    policyParams
  );

  const workspaceDashboardRoleArn = await createRoleAndPolicy(
    uniqueId,
    "WorkspaceDashboardRole",
    workspaceDashboardRoleAssumePolicy,
    workspaceDashboardRolePolicy
  );

  return {
    workspaceArn,
    workspaceS3BucketArn: s3BucketArn,
    workspaceRoleArn,
    workspaceDashboardRoleArn,
  };
}

async function createWorkspaceIfNotExists(
  workspaceId: string,
  workspaceRolePolicy: string,
  workspaceDashboardRolePolicyTemplate: string,
  amgIamRole?: string
) {
  let workspace: GetWorkspaceCommandOutput;

  console.log(`Creating a new Workspace: ${workspaceId}`);
  try {
    workspace = await aws().tm.getWorkspace({ workspaceId });

    console.log(
      `Found an existing Workspace with the same Id. Skip creating Workspace.`
    );
  } catch (e) {
    if (e instanceof ResourceNotFoundException) {
      await prepareWorkspace(
        workspaceId,
        workspaceRolePolicy,
        workspaceDashboardRolePolicyTemplate,
        amgIamRole
      );

      workspace = await aws().tm.getWorkspace({ workspaceId });
    } else {
      throw new Error(`Failed to get workspace. ${e}`);
    }
  }

  if (!workspace.workspaceId) {
    throw new Error("Unable to get a valid workspace");
  }

  return {
    workspaceId,
    workspaceArn: workspace.arn,
  };
}

export { prepareWorkspace, createWorkspaceIfNotExists, getDashboardRole };
